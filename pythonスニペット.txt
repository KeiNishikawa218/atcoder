{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"OpenImagebyOpenCV": {
		"prefix": "cv2",
		"body": [
			"cv2.imread('./$1.jpg')",
		],
	"description": "OpenImagebyOpenCV"
	},
	"ResizeImagebyOpenCV": {
		"prefix": "cv2",
		"body": [
			"cv2.resize($1, (int(img.shape[1]*0.1),int(img.shape[0]*0.1)))",
		],
	"description": "ResizeImagebyOpenCV"
	},
	"ImportMatplotlib": {
		"prefix": "import",
		"body": [
			"import matplotlib.pyplot as plt",
		],
	"description": "ImportMatplotlib"
	},
	"ImportNumpy": {
		"prefix": "import",
		"body": [
			"import numpy as np",
		],
	"description": "ImportNumpy"
	},
	"ShowPictureWithOpenCV": {
		"prefix": "cv2",
		"body": [
			"cv2.imshow(\"$1.jpg\", $2) # 画像を表示",
			"cv2.waitKey(0) # キー待ち",
			"cv2.destroyAllWindows() #ウィンドを閉じる"
		],
	"description": "ShowPictureWithOpenCV"
	},
	"MakeUint16Array": {
		"prefix": "np",
		"body": [
			"np.array($1, dtype=np.int16)",
		],
	"description": "MakeUint16Array"
	},
	"input": {
		"prefix": "int",
		"body": [
			"int(input())",
		],
	"description": "数値入力 「N」だけの入力のとき"
	},
	"inputChars": {
		"prefix": "map",
		"body": [
			"map(int, input().split())",
		],
	"description": "複数数値入力　「A B」みたいなスペース空いた入力のとき"
	},
	"inputList": {
		"prefix": "list",
		"body": [
			"list(map(int, input().split())) ",
		],
	"description": "リスト入力"
	},
	"inputMultiArray": {
		"prefix": "[list",
		"body": [
			"[list(map(int,list(input()))) for i in range($1)]",
		],
	"description": "二次元配列入力"
	},
	"alphabet": {
		"prefix": "al",
		"body": [
			"al=[chr(ord('a') + i) for i in range(26)]",
		],
	"description": "アルファベット"
	},
	"primeFactorization": {
		"prefix": "primeFactorization",
		"body": [
			"pf={}",
			"m=341555136",
			"for i in range(2,int(m**0.5)+1):",
			"\twhile m%i==0:",
			"\t\tpf[i]=pf.get(i,0)+1",
			"\t\tm//=i",
			"if m>1:pf[m]=1",
			"print(pf)"
		],
	"description": "素因数分解"
	},
	"primeList": {
		"prefix": "primeList",
		"body": [
			"n = 100",
			"primes = set(range(2, n+1))",
			"for i in range(2, int(n**0.5+1)):",
			"\tprimes.difference_update(range(i*2, n+1, i))",
			"primes=list(primes)"
		],
	"description": "素因リスト"
	},
	"gcd": {
		"prefix": "gcd",
		"body": [
			"import math",
			"a,b=map(int, input().split())",
			"f=math.gcd(a,b)",
			"f2=a*b//f",
			"print(f,f2)"
		],
	"description": "最大公約数、最小公倍数"
	},
	"itertools": {
		"prefix": "import itertools",
		"body": [
			"from itertools import permutations, combinations,combinations_with_replacement,product",
			"a=['a','b','C']",
			"print(list(permutations(a)))",
			"print(list(combinations(a,2)))",
			"print(list(combinations_with_replacement(a,3)))"
		],
	"description": "combinations、組み合わせ、順列"
	},
	"collections": {
		"prefix": "counter",
		"body": [
			"from collections import Counter",
			"a=[2,2,2,3,4,3,1,2,1,3,1,2,1,2,2,1,2,1]",
			"a=Counter(a)",
			"b = sorted(a.items(), key=lambda pair: pair[0], reverse=True) #keyでソート",
			"b = a.most_common() #valueでソート",
			"for i in a.most_common(3):print(i)"
		],
	"description": "集積"
	},
	"strToNum": {
		"prefix": "S",
		"body": [
			"S='54IZSB'",
			"S = S.translate(str.maketrans("ODIZSB","001258"))",
			"print(S)"
		],
	"description": "複数の文字列を変換"
	},
	"bisect": {
		"prefix": "bisect",
		"body": [
			"import bisect",
			"a = [1, 2, 3, 5, 6, 7, 8, 9]",
			"index = bisect.bisect_left(a, 8)"
		],
	"description": "二部探索"
	},
	"inputMultiLines": {
		"prefix": "N, M",
		"body": [
			"N, M = map(int, input().split())",
			"for _ in range(M):",
			"\ta, b = map(int, input().split())"
		],
	"description": "複数行の入力"
	},
	"inputMultiLines2": {
		"prefix": "N, M",
		"body": [
			"N, M = map(int, input().split())",
			"P = [list(map(int,input().split())) for i in range(M)]",
		],
	"description": "複数行の入力2"
	},
	"isPrime": {
		"prefix": "isPrime",
		"body": [
			"def isPrime(x):",
			"if x <= 1:",
			"\treturn False",
			"",
			"for i in range (2, int(x**(1/2)) + 1):",
			"\tif x%i == 0:",
			"\t\treturn False",
			"",
			"return True"
		],
	"description": "素数判定"
	},
	"stringRows": {
		"prefix": "S = ",
		"body": [
			"S = [input() for _ in range(N)]"
		],
	"description": "複数行の文字列入力"
	},
	"gcdFromList": {
		"prefix": "gcd",
		"body": [
			"import math",
			"a = list(map(int, input().split()))",
			"#最大公約数",
			"ans = a[0]",
			"for i in range(1, N):",
			"\tans = math.gcd(ans, a[i])",
			"#最小公倍数",
			"ans = a[0]",
			"for i in range(1, N):",
			"\tans = ans * a[i] // math.gcd(ans, a[i])",
			"",
			"print(ans)"
		],
	"description": "複数の値の最大公約数・最小公倍数"
	},
	"numToBin": {
		"prefix": "bin",
		"body": [
			"for i in range(2**N):",
    		"\ts = str(bin(i))",
    		"\tcondition = s[2:].zfill(N)"
		],
	"description": "数値を2進数に変換し0で埋める"
	},
	"sieve": {
		"prefix": "sieve",
		"body": [
			"def sieve(n):",
			"is_prime = [True for _ in range(n+1)]",
			"is_prime[0] = False",
			"",
			"for i in range(2, n+1):",
			"\tif is_prime[i-1]:",
			"\t\tj = 2 * i",
			"\t\twhile j <= n:",
			"\t\t\tis_prime[j-1] = False",
			"\t\t\tj += i",
			"table = [ i for i in range(1, n+1) if is_prime[i-1]]",
			"return is_prime, table"
		],
	"description": "数値を2進数に変換し0で埋める"
	},
	"kyouProHead": {
		"prefix": "import",
		"body": [
			"#import bisect,collections,copy,heapq,itertools,math,numpy,string",
			"import sys",
			"def S(): return sys.stdin.readline().rstrip()",
			"def I(): return int(sys.stdin.readline().rstrip())",
			"def LI(): return list(map(int,sys.stdin.readline().rstrip().split()))",
			"def LS(): return list(sys.stdin.readline().rstrip().split())",
			"#N = I()",
			"#A = [LI() for _ in range(N)]",
		],
	"description": "競プロの入力"
	},
	"setOperation": {
		"prefix": "set",
		"body": [
			"#複数のリストから共通する要素を抽出",
			"l1_l2_l3_and = set(l1) & set(l2) & set(l3)",
			"2つのリストから共通しない要素を抽出",
			"l1_l2_sym_diff = set(l1) ^ set(l2)"
		],
	"description": "積集合と（和ー積）"
	},
	"multiSort": {
		"prefix": "sorted",
		"body": [
			"sorted($1, key=lambda x:x[$2]) #多次元配列のソートx[]で列を指定",
		],
	"description": "多次元配列のソート"
	},
	"minusOneFromArray": {
		"prefix": "list",
		"body": [
			"list(map(lambda x: int(x) - 1, input().split()))	#すべての要素から-1",
		],
	"description": "読み込み後すべての要素から-1"
	},
	"UnionFind": {
		"prefix": "union",
		"body": [
			"class UnionFind:",
			"	# 作りたい要素数nで初期化",
			"	# 使用するインスタンス変数の初期化",
			"	def __init__(self, n):",
			"		self.n = n",
			"		# root[x]<0ならそのノードが根かつその値が木の要素数",
			"		# rootノードでその木の要素数を記録する",
			"		self.root = [-1]*(n+1)",
			"		# 木をくっつける時にアンバランスにならないように調整する",
			"		self.rank = [0]*(n+1)",
			"",
			"	# ノードxのrootノードを見つける",
			"	def findRoot(self, x):",
			"		if(self.root[x] < 0): # 根",
			"			return x",
			"		else:",
			"			# ここで代入しておくことで、後の繰り返しを避ける",
			"			self.root[x] = self.findRoot(self.root[x])",
			"			return self.root[x]",
			"	# 木の併合、入力は併合したい各ノード",
			"	def unite(self, x, y):",
			"		# 入力ノードのrootノードを見つける",
			"		x = self.findRoot(x)",
			"		y = self.findRoot(y)",
			"		# すでに同じ木に属していた場合",
			"		if x == y:",
			"			return ",
			"		# 違う木に属していた場合rankを見てくっつける方を決める",
			"		if self.rank[x] > self.rank[y]:",
			"			self.root[x] += self.root[y]",
			"			self.root[y] = x",
			"",
			"		else:",
			"			self.root[y] += self.root[x]",
			"			self.root[x] = y",
			"			# rnkが同じ（深さに差がない場合）は1増やす",
			"			if self.rank[x] == self.rank[y]:",
			"				self.rank[y] += 1",
			"	# xとyが同じグループに属するか判断",
			"	def isSameGroup(self, x, y):",
			"		return self.findRoot(x) == self.findRoot(y)",
			"",
			"	# ノードxが属する木のサイズを返す",
			"	def count(self, x):",
			"		return -self.root[self.findRoot(x)]",
		],
	"description": "UnionFind"
	},
}

